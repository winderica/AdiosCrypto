#pragma once

namespace enhancedSPN {

    int s[] = {
        0xd2, 0xcd, 0xc6, 0xca, 0x43, 0xda, 0xde, 0x74, 0x81, 0xb0, 0xd6, 0x9a, 0x4f, 0x66, 0x1a, 0xc7,
        0x7b, 0x33, 0x78, 0xcc, 0x4b, 0xe8, 0xf6, 0x41, 0x1c, 0x65, 0x13, 0x1e, 0x2d, 0x15, 0xc3, 0x71,
        0x06, 0x4c, 0x22, 0x97, 0x87, 0x8e, 0x46, 0x7d, 0x85, 0x14, 0x54, 0x40, 0xc0, 0x69, 0x80, 0xa4,
        0xb5, 0x76, 0x92, 0x72, 0xa9, 0x27, 0xb4, 0x2b, 0xb6, 0xa3, 0x31, 0x53, 0x5a, 0x96, 0x03, 0xc4,
        0xb8, 0x32, 0x9d, 0xab, 0xaa, 0xdf, 0xeb, 0x11, 0xe3, 0x8a, 0x67, 0x02, 0x98, 0x52, 0x9e, 0x35,
        0xe2, 0x60, 0xb1, 0x5c, 0x91, 0x4d, 0x00, 0xea, 0xdb, 0x7a, 0x0f, 0x88, 0xfb, 0xfd, 0xe9, 0x7e,
        0x61, 0x5e, 0x1b, 0x4a, 0xf2, 0xfc, 0x82, 0x34, 0xf4, 0x48, 0xb3, 0xce, 0xe1, 0x8d, 0x2e, 0x19,
        0xe0, 0x12, 0xf1, 0x3e, 0x23, 0x2c, 0x89, 0x44, 0x0d, 0x07, 0x6b, 0x90, 0xa1, 0x4e, 0x42, 0x63,
        0x7c, 0xbd, 0xa2, 0x5d, 0xee, 0x26, 0xf5, 0xa6, 0x75, 0x16, 0xcf, 0x8c, 0xd5, 0xec, 0xa8, 0xc2,
        0xd1, 0x30, 0xfe, 0x6d, 0x93, 0x9b, 0x21, 0x39, 0xf7, 0x5f, 0x09, 0xa5, 0x6f, 0xef, 0xba, 0x6a,
        0x51, 0x83, 0x8b, 0xbb, 0xf8, 0xb7, 0x95, 0xed, 0x73, 0x62, 0x1d, 0xd3, 0x20, 0x24, 0x55, 0xc8,
        0x56, 0x79, 0x86, 0xdc, 0x3c, 0x64, 0xff, 0x18, 0xdd, 0xe7, 0x45, 0x5b, 0xd4, 0xcb, 0x1f, 0xb9,
        0x0b, 0xc9, 0x94, 0x9f, 0xad, 0x17, 0x05, 0x77, 0x59, 0x6c, 0xc5, 0xae, 0xfa, 0x0c, 0x3a, 0x3b,
        0xc1, 0x8f, 0x04, 0xd7, 0xf9, 0xb2, 0x47, 0xbf, 0xd0, 0x84, 0xe6, 0x08, 0x37, 0x70, 0xac, 0x2f,
        0x50, 0x49, 0x29, 0xa0, 0xd8, 0x68, 0x3f, 0x25, 0x2a, 0xaf, 0x36, 0x58, 0x7f, 0xe4, 0x99, 0x6e,
        0x3d, 0x10, 0x38, 0xbc, 0x0e, 0x57, 0xf3, 0xd9, 0xf0, 0x28, 0x9c, 0xbe, 0x01, 0xe5, 0x0a, 0xa7,
    };

    int p[] = {
        0, 3, 2, 1,
        5, 7, 6, 4,
        9, 8, 11, 10,
        15, 14, 12, 13
    };

    auto sBox(uint8_t x[]) {
        for (int i = 0; i < 16; i++) {
            x[i] = s[x[i]];
        }
    }

    auto mul(uint8_t a, uint8_t b) {
        uint8_t c = 0;
        for (int i = 0; i < 8; i++) {
            if (b & 1) {
                auto d = a;
                for (int j = 0; j < i; j++) {
                    uint8_t high_bit = d & 0x80;
                    d <<= 1;
                    if (high_bit) {
                        d ^= 0x1b;
                    }
                }
                c ^= d;
            }
            b >>= 1;
        }
        return c;
    }

    auto pBox(uint8_t x[]) {
        uint8_t res[16];
        for (int i = 0; i < 16; i++) {
            res[i] = x[p[i]];
        }
        for (int i = 0; i < 16; i++) {
            x[i] = res[i];
        }
        for (int i = 0; i < 4; i++) {
            x[i] = mul(0x02, x[i]) ^ x[4 + i] ^ x[8 + i] ^ x[12 + i];
            x[4 + i] = x[i] ^ mul(0x02, x[4 + i]) ^ x[8 + i] ^ x[12 + i];
            x[8 + i] = x[i] ^ x[4 + i] ^ mul(0x02, x[8 + i]) ^ x[12 + i];
            x[12 + i] = x[i] ^ x[4 + i] ^ x[8 + i] ^ mul(0x02, x[12 + i]);
        }
    }

    auto addRoundKey(uint8_t x[], const uint8_t k[]) {
        for (int i = 0; i < 16; i++) {
            x[i] ^= k[i];
        }
    }

    auto generateRoundKey(const uint8_t k[], uint8_t rk[]) {
        int i = 0;
        while (i < 32) {
            rk[i] = k[i] ^ s[i];
            i++;
        }
        while (i < 16 * (Mr + 1)) {
            rk[i] = rk[i - 32] ^ s[rk[i - 4]];
            i++;
        }
    }

    auto SPN(uint8_t x[], const uint8_t k[]) {
        addRoundKey(x, k);
        for (int i = 0; i < Mr; i++) {
            sBox(x);
            if (i != Mr - 1) {
                pBox(x);
            }
            addRoundKey(x, k + 16 * (i + 1));
        }
    }
}
